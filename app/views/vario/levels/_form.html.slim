- label     = nil if label.blank?
- context   = {} if context.blank?
- draggable = true if draggable.nil?

= ui_form_for([setting, level], id: level.id, url: polymorphic_path([vario, setting, level]), remote: true, title: label, footer: false, header: label.present?, padding: label.present?) do |f|
  - context.each do |key, value|
    = f.simple_fields_for :context do |ff|
      = ff.input key, as: :hidden, input_html: { value: value }
  - level.conditions_for(context).each do |condition|
    = f.simple_fields_for :conditions do |ff|
      = ff.input condition.key, as: :hidden, input_html: { value: context[condition.key.to_sym] }
  .row
    - if draggable
      i.fal.fa-ellipsis-v.fa-3x.draggable style="margin-top: 8px; margin-left: 16px;"
    - level.conditions_not_for(context).each do |condition|
      .col-2
        = ui_nested_form f, :conditions do |ff|
          - case condition.key_data[:type]
            - when :select
              = ff.input condition.key, as: :fancy_select, label: condition.key, selected: condition.value, collection: condition.collection, include_blank: true, required: false, input_html: { id: "#{condition.key}_#{level.id}" }
            - when :boolean
              = ff.input condition.key, as: :boolean, label: condition.key, value: condition.value, required: false
            - else
              = ff.input condition.key, label: condition.key, required: false, input_html: { value: context[condition.key.to_sym] }

    .col-2
      - case setting.type
        - when :array
          - if setting.collection.present?
            = f.input :value, as: :fancy_select, input_html: { multiple: true, id: "value_#{level.id}" }, collection: [["All", 'all']] + setting.collection, required: false
          - else
            = f.input :value, as: :text, input_html: { rows: 10, style: 'height: auto' },  hint: 'Multiple values possible, separate with "," or new lines.'
        - when :integer
          = f.input :value, as: :integer
        - when :boolean
          = f.input :value, as: :boolean, wrapper: :vertical_boolean
        - when :text
          = f.input :value, as: :text, input_html: { data: {controller: 'editor', target: 'editor.textarea', mode: 'text/plain'}}
        - when :hash
          = f.input :value, as: :text, input_html: { data: {controller: 'editor', target: 'editor.textarea', mode: 'application/yaml'}}
        - else
          - if setting.collection.present?
            = f.input :value, as: :fancy_select, collection: setting.collection, required: false
          - else
            = f.input :value
    .col-2
      = ui_form_actions(f, { continue: false, extra_buttons: label.present? ? {} : { Delete: 'delete' } }).call
