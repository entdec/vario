= ui_form_for([@setting, @level], title: label) do |f|
  - case @setting.type
    - when :array
      - if @setting.collection.present?
        = f.input :value, as: :fancy_select, input_html: { multiple: true }, collection: [["All", 'all']] + @setting.collection, required: false
      - else
        = f.input :value, as: :text, input_html: { rows: 10, style: 'height: auto' },  hint: 'Multiple values possible, separate with "," or new lines.'
    - when :integer
      = f.input :value, as: :integer
    - when :boolean
      = f.input :value, as: :boolean, wrapper: :boolean
    - when :text
      = f.input :value, as: :text, input_html: { data: {controller: 'editor', target: 'editor.textarea', mode: 'text/plain'}}
    - when :hash
      = f.input :value, as: :text, input_html: { data: {controller: 'editor', target: 'editor.textarea', mode: 'application/yaml'}}
    - else
      - if @setting.collection.present?
        = f.input :value, as: :fancy_select, collection: @setting.collection, required: false
      - else
        = f.input :value

  = ui_card :conditions do
    = ui_nested_form f, :conditions do |ff|
      - @level.conditions.each do |condition|
        = ui_nested_form ff, :conditions do |fff|
          - case condition.key_data[:type]
            - when :select
              = fff.input condition.key, as: :select, label: condition.key, selected: condition.value, collection: condition.collection, include_blank: true, required: false
            - when :boolean
              =  fff.input condition.key, as: :boolean, label: condition.key, value: condition.value, required: false
            - else
              =  fff.input condition.key, label: condition.key, value: condition.value, required: false
