- label     = nil if label.blank?
- context   = {} if context.blank?
- draggable = true if draggable.nil?

= sts.form_for([setting, level], id: level.id, url: polymorphic_path([vario, setting, level]), remote: true, title: label, footer: false, header: label.present?, padding: label.present?) do |f|
  - context.each do |key, value|
    = f.fields_for :context do |ff|
      = ff.input key, as: :hidden, input_html: { value: value }
  - level.conditions_for(context).each do |condition|
    = f.fields_for :conditions do |ff|
      = ff.input condition.key, as: :hidden, input_html: { value: context[condition.key.to_sym] }

  .grid.grid-cols-12.gap-4
    .col-span-1
      - if draggable
        button.draggable
          i class="fal fa-grip-lines" style="margin-top: 8px; margin-left: 16px;"
    .col-span-7
      .grid.grid-cols-12.gap-4
        - level.conditions_not_for(context).each do |condition|
          div class="col-span-#{[12 / level.conditions_not_for(context).size, 3].max}"
            = f.fields_for :conditions do |ff|
              - case condition.key_data[:type]
                - when :select
                  = binding.pry
                  = ff.input condition.key, as: :dropdown, label: condition.key, selected: condition.value, url:  filter_collection_setting_path(condition.instance_variable_get("@setting")), url_params: {condition_key: condition.key}, include_blank: true, required: false, input_html: { id: "#{condition.key}_#{level.id}" }
                - when :boolean
                  = ff.input condition.key, as: :switch, label: condition.key, value: condition.value, required: false
                - else
                  = ff.input condition.key, label: condition.key, required: false, input_html: { value: context[condition.key.to_sym] }

    .col-span-2
      - case setting.type
        - when :array
          - if setting.collection.present?
            = f.input :value, as: :select, input_html: { multiple: true, id: "value_#{level.id}" }, collection: [["All", 'all']] + setting.collection, required: false
          - else
            = f.input :value, as: :text, input_html: { rows: 10, style: 'height: auto' },  hint: 'Multiple values possible, separate with "," or new lines.'
        - when :integer
          = f.input :value, as: :number
        - when :boolean
          = f.input :value, as: :switch
        - when :text
          = f.input :value, as: :editor, mode: 'text/plain'
        - when :hash
          = f.input :value, as: :editor, mode: 'application/yaml'
        - else
          - if setting.collection.present?
            = f.input :value, as: :dropdown, collection: setting.collection, required: false
          - else
            = f.input :value
    .col-span-1.p-3
      = f.button t('.save'), value: 'save'
    .col-span-1.p-3
      = f.button t('.delete'), value: 'delete' unless label.present?
